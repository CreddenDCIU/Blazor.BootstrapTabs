<CascadingValue Value="this">
    <ul class="@CssClass" id="tabs-tab" role="tablist">

        @foreach (TabPage tabPage in GetUnhiddenPages())
        {
            String buttonClass = "nav-link " + @GetActiveClass(tabPage);
            if(tabPage.HasValidationErrors) { buttonClass += " invalid"; }

            <li class="nav-item" role="presentation">
                <button type="button" class="@buttonClass" role="tab" @onclick="() => ActivatePage(tabPage)">
                    @tabPage.Text
                </button>
            </li>
        }
    </ul>
    <div class="tab-content">
        @ChildContent
    </div>
</CascadingValue>

@code {
    // Next line is needed so we are able to add <TabPage> components inside
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string CssClass { get; set; } = "nav nav-pills mb-3";

    public TabPage? ActivePage { get; set; }

    List<TabPage> Pages = new List<TabPage>();

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender) { return; }

        bool stateChanged = false;

        @foreach (TabPage tabPage in GetUnhiddenPages())
        {
            if (tabPage.OldValidationValue == tabPage.HasValidationErrors) { continue; }

            tabPage.OldValidationValue = tabPage.HasValidationErrors;
            stateChanged = true;
        }

        if (stateChanged) { this.StateHasChanged(); }
    }

    internal void AddPage(TabPage tabPage)
    {
        Pages.Add(tabPage);
        if (Pages.Count == 1)
            ActivePage = tabPage;
        StateHasChanged();
    }

    string GetActiveClass(TabPage page)
    {
        return page == ActivePage ? "active" : string.Empty;
    }

    void ActivatePage(TabPage page)
    {
        ActivePage = page;
    }

    List<TabPage> GetUnhiddenPages()
    {
        List<TabPage> retVal = Pages.Where(p => !p.Hidden).ToList();

        if(ActivePage != null && retVal.Contains(ActivePage)) { return retVal; }

        if (Pages.Count >= 1) { ActivePage = Pages[0]; }

        return retVal;
    }
}